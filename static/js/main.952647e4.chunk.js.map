{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reduser.js","redux/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactsList/ContactsList.js","components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","items","createReducer","state","payload","map","contact","name","includes","alert","filter","id","loading","_","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","axios","defaults","baseURL","number","dispatch","a","post","data","contactId","delete","get","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","connect","onDeleteContact","contactsOperations","className","onClick","ContactsForm","contactUniqueId","shortid","generate","addContact","setState","prevState","handleInputChange","event","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","this","type","pattern","title","onChange","required","Component","contactsActions","target","App","fetchContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.952647e4.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const filterContacts = createAction('contacts/Filter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterContacts,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (state, { payload }) => payload,\r\n\r\n  [addContactSuccess]: (state, { payload }) =>\r\n    state.map(contact => contact.name).includes(payload.name)\r\n      ? alert(`${payload.name} is already in contacts.`)\r\n      : [payload, ...state],\r\n\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reduser';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  // devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  async dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest);\r\n\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(addContactError(error));\r\n    }\r\n  };\r\n\r\nconst deleteContact = contactId => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport './ContactsList.css';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n  <ul className=\"contacts__list\">\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className=\"contacts__list-item\" key={id}>\r\n        <p className=\"contacts__list-name\">{name}</p>\r\n        <p className=\"contacts__list-number\">{number}</p>\r\n\r\n        <button\r\n          className=\"contacts__list-button\"\r\n          onClick={() => onDeleteContact(id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// const getVisibleContacts = (items, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return items.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDaspatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDaspatchToProps)(ContactsList);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\n\r\nimport shortid from 'shortid';\r\n\r\nimport './ContactsForm.css';\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    // contacts: [],\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  contactUniqueId = shortid.generate();\r\n\r\n  addContact = (name, number) => {\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    this.setState(prevState => ({\r\n      contacts: [contact, ...prevState.contacts],\r\n    }));\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n      id: shortid.generate(),\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"\" onSubmit={this.handleSubmit}>\r\n        <label className=\"contacts__form-item\" id={this.contactUniqueId}>\r\n          Name\r\n          <input\r\n            className=\"contacts__form-text\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"title\"\r\n            onChange={this.handleInputChange}\r\n            value={this.state.name}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className=\"contacts__form-item\" id={this.contactUniqueId}>\r\n          Number\r\n          <input\r\n            className=\"contacts__form-text\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"title\"\r\n            onChange={this.handleInputChange}\r\n            value={this.state.number}\r\n            required\r\n          />\r\n        </label>\r\n        <button className=\"contacts__form-button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDaspatchToProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(contactsOperations.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(null, mapDaspatchToProps)(ContactsForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nimport './Filter.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"filter\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  // value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDaspatchToProps = dispatch => ({\r\n  onChange: event =>\r\n    dispatch(contactsActions.filterContacts(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDaspatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations } from './redux/contacts';\r\n// import { getLoading } from './redux/contacts/contacts-selectors';\r\nimport ContactsList from './components/ContactsList';\r\nimport ContactsForm from './components/ContactsForm';\r\nimport Filter from './components/Filter';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactsForm />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n\r\n        <ContactsList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nimport App from './App';\r\n\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}